package dcpu.proto;

option java_package = "dcpu.generated";

option java_outer_classname = "DcpuProgram";

message Program {
  optional bytes assembled = 1;
  repeated Statement statement = 2;
}

message Statement {
  enum Type {
    INSTRUCTION = 0;
    LABEL = 1;
    DATA = 2;
    COMMENT = 3;
    BLANK_SPACE = 4;
  }
  optional Type type = 1;
  optional Instruction instruction = 2;
  optional string label = 3;
  optional sint32 data = 4;
  optional string comment = 5;
  optional uint32 space = 6;
}

message Instruction {
  optional Opcode opcode = 1;
  optional Operand operand_b = 2;
  optional Operand operand_a = 3;
}

message Opcode {
  enum Type {
    BASIC = 0;
    ADVANCED = 1;
  }
  enum Basic {
    set = 0x01;
    add = 0x02;
    sub = 0x03;
    mul = 0x04;
    mli = 0x05;
    div = 0x06;
    dvi = 0x07;
    mod = 0x08;
    mdi = 0x09;
    and_ = 0x0a;
    bor = 0x0b;
    xor_ = 0x0c;
    shr = 0x0d;
    asr = 0x0e;
    shl = 0x0f;
    ifb = 0x10;
    ifc = 0x11;
    ife = 0x12;
    ifn = 0x13;
    ifg = 0x14;
    ifa = 0x15;
    ifl = 0x16;
    ifu = 0x17;
    adx = 0x1a;
    sbx = 0x1b;
    sti = 0x1e;
    std = 0x1f;
  }
  enum Advanced {
    jsr = 0x01;
    int_ = 0x08;
    iag = 0x09;
    ias = 0x0a;
    rfi = 0x0b;
    iaq = 0x0c;
    hwn = 0x10;
    hwq = 0x11;
    hwi = 0x12;
  }
  optional Type type = 1;
  optional Basic basic = 2;
  optional Advanced advanced = 3;
}

message Operand {
  enum Type {
    REGISTER = 0x00;
    LOCATION_IN_REGISTER = 0x08;
    LOCATION_OFFSET_BY_REGISTER = 0x10;
    PUSH_POP = 0x18;
    PEEK = 0x19;
    PICK = 0x1a;
    STACK_POINTER = 0x1b;
    PROGRAM_COUNTER = 0x1c;
    EXTRA = 0x1d;
    LOCATION = 0x1e;
    LITERAL = 0x1f;
  }
  enum Register {
    A = 0x0;
    B = 0x1;
    C = 0x2;
    X = 0x3;
    Y = 0x4;
    Z = 0x5;
    I = 0x6;
    J = 0x7;
  }
  optional Type type = 1;
  optional Register register = 2;
  optional sint32 value = 3;
  optional string label = 4;
}
